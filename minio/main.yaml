---
# MinIO Namespace (commented out as per your request)
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: minio
#   labels:
#     name: minio

---
# MinIO PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  labels:
    app: minio
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3  # Adjust based on your cluster's storage classes

---
# MinIO Service
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    app: minio
spec:
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: console
  selector:
    app: minio
  type: ClusterIP

---
# MinIO Route for API
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: minio-api
  labels:
    app: minio
spec:
  to:
    kind: Service
    name: minio
    weight: 100
  port:
    targetPort: api
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect

---
# MinIO Route for Console
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: minio-console
  labels:
    app: minio
spec:
  to:
    kind: Service
    name: minio
    weight: 100
  port:
    targetPort: console
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect

---
# MinIO Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      serviceAccountName: minio-sa
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio-pvc
      containers:
        - name: minio
          #image: quay.io/minio/minio:latest
          image: quay.io/minio/minio:RELEASE.2023-10-25T06-33-25Z
          command:
            - /bin/sh
            - -c
          args:
            - mkdir -p /data/models && minio server /data --console-address ":9001"
          env:
            - name: MINIO_ROOT_USER
              value: "<CHANGE_ME>"  
            - name: MINIO_ROOT_PASSWORD
              value: "<CHANGE_ME>"  
          ports:
            - containerPort: 9000
            - containerPort: 9001
          volumeMounts:
            - name: data
              mountPath: "/data"
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 5

---
# MinIO Service Account (required for proper permissions)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-sa
  labels:
    app: minio

---
# MinIO Role with enhanced permissions for bucket management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: minio-role
  labels:
    app: minio
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints", "persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["events", "configmaps", "secrets"]
    verbs: ["get", "create", "update", "patch", "delete"]
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]

---
# MinIO Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-role-binding
  labels:
    app: minio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: minio-role
subjects:
  - kind: ServiceAccount
    name: minio-sa
    namespace: <CHANGE_ME> # Adjust if you're using a different namespace
