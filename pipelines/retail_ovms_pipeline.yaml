# PIPELINE DEFINITION
# Name: retail-ovms-end2end
# Description: Train -> Upload to MinIO -> Convert to ONNX -> Upload -> Deploy OVMS -> Test
# Inputs:
#    feature_count: int [Default: 10.0]
#    max_depth: int [Default: 12.0]
#    minio_access_key: str [Default: 'admin']
#    minio_bucket: str [Default: 'artifacts']
#    minio_endpoint: str [Default: 'minio-api-florient2016-dev.apps.rm2.thpm.p1.openshiftapps.com']
#    minio_secret_key: str [Default: 'Minio@2016']
#    minio_secure: bool [Default: False]
#    model_name: str [Default: 'retail-sales']
#    n_estimators: int [Default: 150.0]
#    s3_prefix: str [Default: 'retail']
components:
  comp-convert-joblib-to-onnx:
    executorLabel: exec-convert-joblib-to-onnx
    inputDefinitions:
      artifacts:
        joblib_in:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        feature_count:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      artifacts:
        onnx_dir_out:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-deploy-ovms-and-test:
    executorLabel: exec-deploy-ovms-and-test
    inputDefinitions:
      artifacts:
        ovms_model_root_s3:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        minio_access_key:
          parameterType: STRING
        minio_endpoint:
          parameterType: STRING
        minio_secret_key:
          parameterType: STRING
        minio_secure:
          parameterType: BOOLEAN
        model_name:
          parameterType: STRING
        n_features:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        isvc_url_out:
          parameterType: STRING
  comp-train-retail-model:
    executorLabel: exec-train-retail-model
    inputDefinitions:
      parameters:
        max_depth:
          parameterType: NUMBER_INTEGER
        n_estimators:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      artifacts:
        joblib_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-upload-joblib-to-minio:
    executorLabel: exec-upload-joblib-to-minio
    inputDefinitions:
      artifacts:
        joblib_in:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        minio_access_key:
          parameterType: STRING
        minio_bucket:
          parameterType: STRING
        minio_endpoint:
          parameterType: STRING
        minio_secret_key:
          parameterType: STRING
        minio_secure:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
        s3_prefix:
          parameterType: STRING
    outputDefinitions:
      parameters:
        uploaded_uri_out:
          parameterType: STRING
  comp-upload-onnx-to-minio:
    executorLabel: exec-upload-onnx-to-minio
    inputDefinitions:
      artifacts:
        onnx_dir_in:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        minio_access_key:
          parameterType: STRING
        minio_bucket:
          parameterType: STRING
        minio_endpoint:
          parameterType: STRING
        minio_secret_key:
          parameterType: STRING
        minio_secure:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
        s3_prefix:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        ovms_root_out:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-convert-joblib-to-onnx:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - convert_joblib_to_onnx
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn==1.4.2'\
          \ 'joblib==1.3.2' 'skl2onnx==1.16.0' 'onnx==1.16.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef convert_joblib_to_onnx(\n    joblib_in: dsl.InputPath(\"Model\"\
          ),\n    feature_count: int,\n    onnx_dir_out: dsl.OutputPath(\"Directory\"\
          )\n):\n    import joblib, os\n    from skl2onnx import convert_sklearn\n\
          \    from skl2onnx.common.data_types import FloatTensorType\n    from pathlib\
          \ import Path\n\n    loaded = joblib.load(joblib_in)\n    pipeline = loaded.get(\"\
          model\") if isinstance(loaded, dict) and \"model\" in loaded else loaded\n\
          \    n_features = int(getattr(pipeline, \"n_features_in_\", feature_count))\n\
          \n    initial_types = [(\"input\", FloatTensorType([None, n_features]))]\n\
          \    onnx_model = convert_sklearn(pipeline, initial_types=initial_types)\n\
          \n    out_dir = Path(onnx_dir_out) / \"1\"\n    out_dir.mkdir(parents=True,\
          \ exist_ok=True)\n    onnx_path = out_dir / \"model.onnx\"\n    with open(onnx_path,\
          \ \"wb\") as f:\n        f.write(onnx_model.SerializeToString())\n    print(\"\
          Saved ONNX at\", onnx_path)\n\n"
        image: python:3.11-slim
    exec-deploy-ovms-and-test:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - deploy_ovms_and_test
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kubernetes==28.1.0'\
          \ 'requests==2.31.0' 'pyyaml==6.0.1' 'kfp[kubernetes]==2.9.0' && \"$0\"\
          \ \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef deploy_ovms_and_test(\n    model_name: str,\n    ovms_model_root_s3:\
          \ dsl.InputPath(), # type: ignore\n    #ovms_model_root_s3: dsl.InputPath(str),\
          \ \n    #ovms_model_root_s3: str, # type: ignore\n    minio_endpoint: str,\n\
          \    minio_access_key: str,\n    minio_secret_key: str,\n    minio_secure:\
          \ bool,\n    n_features: int,\n    isvc_url_out: dsl.OutputPath(str) = \"\
          isvc_url.txt\",\n):\n    \"\"\"Create Secret, ServiceAccount, and InferenceService\
          \ for OVMS. Wait Ready and test inference.\"\"\"\n    import time, json,\
          \ requests, os\n    from kubernetes import client, config\n    from pathlib\
          \ import Path\n\n    endpoint_url = (\"https://\" if minio_secure else \"\
          http://\") + minio_endpoint\n    #model_root = Path(ovms_model_root_s3).read_text().strip()\n\
          \    if os.path.exists(ovms_model_root_s3):\n        model_root = Path(ovms_model_root_s3).read_text().strip()\n\
          \    else:\n        model_root = ovms_model_root_s3\n\n    # Load kube config\
          \ (in-cluster or local)\n    try:\n        config.load_incluster_config()\n\
          \    except Exception:\n        config.load_kube_config()\n\n    core =\
          \ client.CoreV1Api()\n    custom = client.CustomObjectsApi()\n\n    # Namespace\
          \ detection\n    ns = \"default\"\n    try:\n        with open(\"/var/run/secrets/kubernetes.io/serviceaccount/namespace\"\
          ) as f:\n            ns = f.read().strip()\n    except Exception:\n    \
          \    pass\n\n    # Create/patch Secret\n    secret_name = \"s3-credentials\"\
          \n    secret_body = client.V1Secret(\n        metadata=client.V1ObjectMeta(name=secret_name),\n\
          \        type=\"Opaque\",\n        string_data={\n            \"AWS_ACCESS_KEY_ID\"\
          : minio_access_key,\n            \"AWS_SECRET_ACCESS_KEY\": minio_secret_key,\n\
          \            \"AWS_ENDPOINT_URL\": endpoint_url,\n        },\n    )\n  \
          \  try:\n        core.create_namespaced_secret(ns, secret_body)\n      \
          \  print(\"Created Secret\", secret_name)\n    except client.exceptions.ApiException\
          \ as e:\n        if e.status == 409:\n            core.patch_namespaced_secret(secret_name,\
          \ ns, secret_body)\n            print(\"Patched existing Secret\", secret_name)\n\
          \        else:\n            raise\n\n    # ServiceAccount\n    sa_name =\
          \ \"minio-s3-sa\"\n    sa_body = client.V1ServiceAccount(\n        metadata=client.V1ObjectMeta(name=sa_name),\n\
          \        secrets=[client.V1ObjectReference(name=secret_name)]\n    )\n \
          \   try:\n        core.create_namespaced_service_account(ns, sa_body)\n\
          \        print(\"Created ServiceAccount\", sa_name)\n    except client.exceptions.ApiException\
          \ as e:\n        if e.status == 409:\n            core.patch_namespaced_service_account(sa_name,\
          \ ns, sa_body)\n            print(\"Patched existing ServiceAccount\", sa_name)\n\
          \        else:\n            raise\n\n    # InferenceService spec\n    isvc_name\
          \ = f\"{model_name}-ovms\"\n    isvc = {\n        \"apiVersion\": \"serving.kserve.io/v1beta1\"\
          ,\n        \"kind\": \"InferenceService\",\n        \"metadata\": {\"name\"\
          : isvc_name},\n        \"spec\": {\n            \"predictor\": {\n     \
          \           \"model\": {\n                    \"runtime\": \"ovms\",\n \
          \                   \"protocolVersion\": \"v2\",\n                    \"\
          storageUri\": model_root\n                },\n                \"serviceAccountName\"\
          : sa_name\n            }\n        }\n    }\n\n    group = \"serving.kserve.io\"\
          \n    version = \"v1beta1\"\n    plural = \"inferenceservices\"\n\n    try:\n\
          \        custom.create_namespaced_custom_object(group, version, ns, plural,\
          \ isvc)\n        print(\"Created InferenceService\", isvc_name)\n    except\
          \ client.exceptions.ApiException as e:\n        if e.status == 409:\n  \
          \          custom.patch_namespaced_custom_object(group, version, ns, plural,\
          \ isvc_name, isvc)\n            print(\"Patched existing InferenceService\"\
          , isvc_name)\n        else:\n            raise\n\n    # Wait for Ready\n\
          \    def get_status():\n        obj = custom.get_namespaced_custom_object(group,\
          \ version, ns, plural, isvc_name)\n        return obj.get(\"status\", {})\n\
          \n    url = None\n    print(\"Waiting for InferenceService to be Ready...\"\
          )\n    for _ in range(60):\n        st = get_status()\n        conds = st.get(\"\
          conditions\", [])\n        if any(c.get(\"type\") == \"Ready\" and c.get(\"\
          status\") == \"True\" for c in conds):\n            url = st.get(\"url\"\
          )\n            break\n        time.sleep(10)\n\n    if not url:\n      \
          \  raise RuntimeError(\"InferenceService not Ready in time. Check events/logs.\"\
          )\n\n    Path(isvc_url_out).write_text(url)\n    print(\"Service URL:\"\
          , url)\n\n    # Probe metadata then infer\n    name = isvc_name\n    meta\
          \ = requests.get(f\"{url}/v2/models/{name}\", timeout=30)\n    if meta.status_code\
          \ != 200:\n        # try model_name\n        alt = model_name\n        meta\
          \ = requests.get(f\"{url}/v2/models/{alt}\", timeout=30)\n        if meta.ok:\n\
          \            name = alt\n\n    input_name = \"input\"\n    datatype = \"\
          FP32\"\n    shape = [1, n_features]\n    try:\n        j = meta.json()\n\
          \        if \"inputs\" in j and j[\"inputs\"]:\n            input_name =\
          \ j[\"inputs\"][0].get(\"name\", input_name)\n            datatype = j[\"\
          inputs\"][0].get(\"datatype\", datatype)\n            shape = j[\"inputs\"\
          ][0].get(\"shape\", shape)\n    except Exception:\n        pass\n\n    dummy\
          \ = [0.0] * (shape[-1] if isinstance(shape, list) and len(shape) > 0 else\
          \ n_features)\n    payload = {\n        \"inputs\": [{\n            \"name\"\
          : input_name,\n            \"shape\": shape,\n            \"datatype\":\
          \ datatype,\n            \"data\": dummy\n        }]\n    }\n    r = requests.post(f\"\
          {url}/v2/models/{name}/infer\", json=payload, timeout=60)\n    print(\"\
          Inference status:\", r.status_code)\n    print(\"Inference response:\",\
          \ r.text[:1000])\n\n"
        image: python:3.11-slim
    exec-train-retail-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_retail_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn==1.4.2'\
          \ 'joblib==1.3.2' 'pandas==2.2.1' 'numpy==1.26.4' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_retail_model(\n    n_estimators: int,\n    max_depth: int,\n\
          \    joblib_out: dsl.OutputPath(\"Model\")\n):\n    \"\"\"Train a simple\
          \ RandomForestRegressor on a synthetic retail-like dataset\n    and save\
          \ as joblib for downstream steps. In real life, replace with your data prep.\n\
          \    \"\"\"\n    import numpy as np, pandas as pd\n    from sklearn.ensemble\
          \ import RandomForestRegressor\n    from sklearn.model_selection import\
          \ train_test_split\n    from sklearn.metrics import mean_absolute_error\n\
          \    import joblib, json\n\n    # Synthetic feature table: [promo_flag,\
          \ dow, month, store_id, sku_id, price, lag_1, lag_7, holiday_flag, trend]\n\
          \    rng = np.random.default_rng(42)\n    n = 2000\n    X = pd.DataFrame({\n\
          \        \"promo\": rng.integers(0, 2, n),\n        \"dow\": rng.integers(0,\
          \ 7, n),\n        \"month\": rng.integers(1, 13, n),\n        \"store_id\"\
          : rng.integers(1, 51, n),\n        \"sku_id\": rng.integers(1, 501, n),\n\
          \        \"price\": rng.normal(10, 2, n).clip(1, None),\n        \"lag_1\"\
          : rng.normal(100, 30, n),\n        \"lag_7\": rng.normal(100, 30, n),\n\
          \        \"holiday\": rng.integers(0, 2, n),\n        \"trend\": np.linspace(0,\
          \ 1, n),\n    })\n    # Create a target depending on features + noise\n\
          \    y = (\n        2.0*X[\"promo\"] - 0.3*X[\"price\"] + 0.1*X[\"lag_1\"\
          ] + 0.05*X[\"lag_7\"]\n        + 0.5*X[\"holiday\"] + 5*X[\"trend\"] + rng.normal(0,\
          \ 3, n)\n    )\n\n    X_train, X_test, y_train, y_test = train_test_split(X,\
          \ y, test_size=0.2, random_state=0)\n\n    rf = RandomForestRegressor(n_estimators=n_estimators,\
          \ max_depth=max_depth, random_state=0, n_jobs=-1)\n    rf.fit(X_train, y_train)\n\
          \    preds = rf.predict(X_test)\n\n    mae = float(mean_absolute_error(y_test,\
          \ preds))\n    meta = {\"mae\": mae, \"n_features_in_\": int(getattr(rf,\
          \ \"n_features_in_\", X.shape[1]))}\n    print(\"Train MAE:\", mae)\n\n\
          \    obj = {\"model\": rf, \"meta\": meta, \"feature_names\": list(X.columns)}\n\
          \    import joblib as _joblib\n    _joblib.dump(obj, joblib_out)\n    print(\"\
          Saved joblib to\", joblib_out)\n\n"
        image: python:3.11-slim
    exec-upload-joblib-to-minio:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_joblib_to_minio
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'minio==7.2.7'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_joblib_to_minio(\n    joblib_in: dsl.InputPath(\"Model\"\
          ), # pyright: ignore[reportInvalidTypeForm]\n    minio_endpoint: str,\n\
          \    minio_access_key: str,\n    minio_secret_key: str,\n    minio_bucket:\
          \ str,\n    s3_prefix: str,\n    minio_secure: bool = False,\n    uploaded_uri_out:\
          \ dsl.OutputPath(str) = \"uploaded_uri.txt\", # type: ignore\n):\n    from\
          \ minio import Minio\n    from pathlib import Path\n\n    client = Minio(minio_endpoint,\
          \ access_key=minio_access_key, secret_key=minio_secret_key, secure=bool(minio_secure))\n\
          \    if not client.bucket_exists(minio_bucket):\n        client.make_bucket(minio_bucket)\n\
          \        print(f\"Created bucket {minio_bucket}\")\n\n    key = f\"{s3_prefix}/retail_sales_model.joblib\"\
          \n    client.fput_object(minio_bucket, key, joblib_in, content_type=\"application/octet-stream\"\
          )\n    s3_uri = f\"s3://{minio_bucket}/{key}\"\n    Path(uploaded_uri_out).write_text(s3_uri)\n\
          \    print(\"Uploaded:\", s3_uri)\n\n"
        image: python:3.11-slim
    exec-upload-onnx-to-minio:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_onnx_to_minio
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'minio==7.2.7'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_onnx_to_minio(\n    onnx_dir_in: dsl.InputPath(\"Directory\"\
          ),\n    minio_endpoint: str,\n    minio_access_key: str,\n    minio_secret_key:\
          \ str,\n    minio_bucket: str,\n    s3_prefix: str,\n    minio_secure: bool\
          \ = False,\n    #ovms_root_out: dsl.OutputPath(str) = \"ovms_root.txt\"\n\
          \    ovms_root_out: dsl.OutputPath() = \"ovms_root.txt\"\n):\n    from minio\
          \ import Minio\n    from pathlib import Path\n    import os\n\n    client\
          \ = Minio(minio_endpoint, access_key=minio_access_key, secret_key=minio_secret_key,\
          \ secure=bool(minio_secure))\n    if not client.bucket_exists(minio_bucket):\n\
          \        client.make_bucket(minio_bucket)\n\n    # Upload directory recursively\
          \ to s3://bucket/<prefix>/openvino/\n    root = Path(onnx_dir_in)\n    ovms_prefix\
          \ = f\"{s3_prefix}/openvino\"\n    for p in root.rglob(\"*\"):\n       \
          \ if p.is_file():\n            rel = p.relative_to(root)\n            key\
          \ = f\"{ovms_prefix}/{rel.as_posix()}\"\n            client.fput_object(minio_bucket,\
          \ key, str(p), content_type=\"application/octet-stream\")\n            print(\"\
          Uploaded\", key)\n\n    s3_root = f\"s3://{minio_bucket}/{ovms_prefix}\"\
          \n    Path(ovms_root_out).write_text(s3_root)\n    print(\"OVMS model root:\"\
          , s3_root)\n\n"
        image: python:3.11-slim
pipelineInfo:
  description: Train -> Upload to MinIO -> Convert to ONNX -> Upload -> Deploy OVMS
    -> Test
  name: retail-ovms-end2end
root:
  dag:
    tasks:
      convert-joblib-to-onnx:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-convert-joblib-to-onnx
        dependentTasks:
        - train-retail-model
        inputs:
          artifacts:
            joblib_in:
              taskOutputArtifact:
                outputArtifactKey: joblib_out
                producerTask: train-retail-model
          parameters:
            feature_count:
              componentInputParameter: feature_count
        taskInfo:
          name: convert-joblib-to-onnx
      deploy-ovms-and-test:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-deploy-ovms-and-test
        dependentTasks:
        - upload-onnx-to-minio
        inputs:
          artifacts:
            ovms_model_root_s3:
              taskOutputArtifact:
                outputArtifactKey: ovms_root_out
                producerTask: upload-onnx-to-minio
          parameters:
            minio_access_key:
              componentInputParameter: minio_access_key
            minio_endpoint:
              componentInputParameter: minio_endpoint
            minio_secret_key:
              componentInputParameter: minio_secret_key
            minio_secure:
              componentInputParameter: minio_secure
            model_name:
              componentInputParameter: model_name
            n_features:
              componentInputParameter: feature_count
        taskInfo:
          name: deploy-ovms-and-test
      train-retail-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-retail-model
        inputs:
          parameters:
            max_depth:
              componentInputParameter: max_depth
            n_estimators:
              componentInputParameter: n_estimators
        taskInfo:
          name: train-retail-model
      upload-joblib-to-minio:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-joblib-to-minio
        dependentTasks:
        - train-retail-model
        inputs:
          artifacts:
            joblib_in:
              taskOutputArtifact:
                outputArtifactKey: joblib_out
                producerTask: train-retail-model
          parameters:
            minio_access_key:
              componentInputParameter: minio_access_key
            minio_bucket:
              componentInputParameter: minio_bucket
            minio_endpoint:
              componentInputParameter: minio_endpoint
            minio_secret_key:
              componentInputParameter: minio_secret_key
            minio_secure:
              componentInputParameter: minio_secure
            s3_prefix:
              componentInputParameter: s3_prefix
        taskInfo:
          name: upload-joblib-to-minio
      upload-onnx-to-minio:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-onnx-to-minio
        dependentTasks:
        - convert-joblib-to-onnx
        inputs:
          artifacts:
            onnx_dir_in:
              taskOutputArtifact:
                outputArtifactKey: onnx_dir_out
                producerTask: convert-joblib-to-onnx
          parameters:
            minio_access_key:
              componentInputParameter: minio_access_key
            minio_bucket:
              componentInputParameter: minio_bucket
            minio_endpoint:
              componentInputParameter: minio_endpoint
            minio_secret_key:
              componentInputParameter: minio_secret_key
            minio_secure:
              componentInputParameter: minio_secure
            s3_prefix:
              componentInputParameter: s3_prefix
        taskInfo:
          name: upload-onnx-to-minio
  inputDefinitions:
    parameters:
      feature_count:
        defaultValue: 10.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      max_depth:
        defaultValue: 12.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      minio_access_key:
        defaultValue: admin
        isOptional: true
        parameterType: STRING
      minio_bucket:
        defaultValue: artifacts
        isOptional: true
        parameterType: STRING
      minio_endpoint:
        defaultValue: minio-api-florient2016-dev.apps.rm2.thpm.p1.openshiftapps.com
        isOptional: true
        parameterType: STRING
      minio_secret_key:
        defaultValue: Minio@2016
        isOptional: true
        parameterType: STRING
      minio_secure:
        defaultValue: false
        isOptional: true
        parameterType: BOOLEAN
      model_name:
        defaultValue: retail-sales
        isOptional: true
        parameterType: STRING
      n_estimators:
        defaultValue: 150.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      s3_prefix:
        defaultValue: retail
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
